{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HomePC\\\\Desktop\\\\Codes\\\\HallOfShame\\\\client\\\\src\\\\Paginate.js\";\nimport ReactPaginate from \"react-paginate\";\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Paginate = ({\n  data\n}) => {\n  console.log(\"AAAAAAAAAAA\");\n  console.log(data.items);\n  if (data.items != undefined) {\n    var _s = $RefreshSig$();\n    function Items({\n      currentItems\n    }) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"items\",\n        children: currentItems && currentItems.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Item #\", item]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this);\n    }\n    function PaginatedItems({\n      itemsPerPage\n    }) {\n      _s();\n      // We start with an empty list of items.\n      const [currentItems, setCurrentItems] = useState(null);\n      const [pageCount, setPageCount] = useState(0);\n      // Here we use item offsets; we could also use page offsets\n      // following the API or data you're working with.\n      const [itemOffset, setItemOffset] = useState(0);\n      useEffect(() => {\n        // Fetch items from another resources.\n        const endOffset = itemOffset + itemsPerPage;\n        console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n        setCurrentItems(data.items.slice(itemOffset, endOffset));\n        setPageCount(Math.ceil(data.items.length / itemsPerPage));\n      }, [itemOffset, itemsPerPage]);\n\n      // Invoke when user click to request another page.\n      const handlePageClick = event => {\n        const newOffset = event.selected * itemsPerPage % data.items.length;\n        console.log(`User requested page number ${event.selected}, which is offset ${newOffset}`);\n        setItemOffset(newOffset);\n      };\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Items, {\n          currentItems: currentItems\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ReactPaginate, {\n          nextLabel: \"next >\",\n          onPageChange: handlePageClick,\n          pageRangeDisplayed: 3,\n          marginPagesDisplayed: 2,\n          pageCount: pageCount,\n          previousLabel: \"< previous\",\n          pageClassName: \"page-item\",\n          pageLinkClassName: \"page-link\",\n          previousClassName: \"page-item\",\n          previousLinkClassName: \"page-link\",\n          nextClassName: \"page-item\",\n          nextLinkClassName: \"page-link\",\n          breakLabel: \"...\",\n          breakClassName: \"page-item\",\n          breakLinkClassName: \"page-link\",\n          containerClassName: \"pagination\",\n          activeClassName: \"active\",\n          renderOnZeroPageCount: null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    }\n    _s(PaginatedItems, \"HTeX8cSP+G2jiDQZoJcFFLxPhRM=\");\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(PaginatedItems, {\n      itemsPerPage: 4\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_c = Paginate;\nexport default Paginate;\nvar _c;\n$RefreshReg$(_c, \"Paginate\");","map":{"version":3,"names":["ReactPaginate","React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Paginate","data","console","log","items","undefined","_s","$RefreshSig$","Items","currentItems","className","children","map","item","fileName","_jsxFileName","lineNumber","columnNumber","PaginatedItems","itemsPerPage","setCurrentItems","pageCount","setPageCount","itemOffset","setItemOffset","endOffset","slice","Math","ceil","length","handlePageClick","event","newOffset","selected","nextLabel","onPageChange","pageRangeDisplayed","marginPagesDisplayed","previousLabel","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakLabel","breakClassName","breakLinkClassName","containerClassName","activeClassName","renderOnZeroPageCount","_c","$RefreshReg$"],"sources":["C:/Users/HomePC/Desktop/Codes/HallOfShame/client/src/Paginate.js"],"sourcesContent":["import ReactPaginate from \"react-paginate\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst Paginate = ({ data }) => {\r\n  console.log(\"AAAAAAAAAAA\");\r\n  console.log(data.items);\r\n\r\n  if (data.items != undefined) {\r\n    function Items({ currentItems }) {\r\n      return (\r\n        <div className=\"items\">\r\n          {currentItems &&\r\n            currentItems.map((item) => (\r\n              <div>\r\n                <h3>Item #{item}</h3>\r\n              </div>\r\n            ))}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    function PaginatedItems({ itemsPerPage }) {\r\n      // We start with an empty list of items.\r\n      const [currentItems, setCurrentItems] = useState(null);\r\n      const [pageCount, setPageCount] = useState(0);\r\n      // Here we use item offsets; we could also use page offsets\r\n      // following the API or data you're working with.\r\n      const [itemOffset, setItemOffset] = useState(0);\r\n\r\n      useEffect(() => {\r\n        // Fetch items from another resources.\r\n        const endOffset = itemOffset + itemsPerPage;\r\n        console.log(`Loading items from ${itemOffset} to ${endOffset}`);\r\n        setCurrentItems(data.items.slice(itemOffset, endOffset));\r\n        setPageCount(Math.ceil(data.items.length / itemsPerPage));\r\n      }, [itemOffset, itemsPerPage]);\r\n\r\n      // Invoke when user click to request another page.\r\n      const handlePageClick = (event) => {\r\n        const newOffset = (event.selected * itemsPerPage) % data.items.length;\r\n        console.log(\r\n          `User requested page number ${event.selected}, which is offset ${newOffset}`\r\n        );\r\n        setItemOffset(newOffset);\r\n      };\r\n\r\n      return (\r\n        <>\r\n          <Items currentItems={currentItems} />\r\n          <ReactPaginate\r\n            nextLabel=\"next >\"\r\n            onPageChange={handlePageClick}\r\n            pageRangeDisplayed={3}\r\n            marginPagesDisplayed={2}\r\n            pageCount={pageCount}\r\n            previousLabel=\"< previous\"\r\n            pageClassName=\"page-item\"\r\n            pageLinkClassName=\"page-link\"\r\n            previousClassName=\"page-item\"\r\n            previousLinkClassName=\"page-link\"\r\n            nextClassName=\"page-item\"\r\n            nextLinkClassName=\"page-link\"\r\n            breakLabel=\"...\"\r\n            breakClassName=\"page-item\"\r\n            breakLinkClassName=\"page-link\"\r\n            containerClassName=\"pagination\"\r\n            activeClassName=\"active\"\r\n            renderOnZeroPageCount={null}\r\n          />\r\n        </>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PaginatedItems itemsPerPage={4} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Paginate;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}